CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);                                                   
CREATE TABLE DEPARTMENT(
   ID INT PRIMARY KEY      NOT NULL,
   DEPT           CHAR(50) NOT NULL,
   EMP_ID         INT      NOT NULL
);                                                   

/*** Think of schema like folders inside drive to manage tables better and have people not interfering with others tables ***/
create schema myschema;                               
create table myschema.company(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25),
   SALARY   DECIMAL (18, 2),
   PRIMARY KEY (ID)
);                                                  
select * from myschema.company;
DROP SCHEMA myschema;                              
DROP SCHEMA myschema CASCADE;                      


/*** Insert Queries examples ***/

DROP TABLE IF EXISTS COMPANY;
CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL,
   JOIN_DATE	    DATE
);
INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (1, 'Paul', 32, 'California', 20000.00,'2001-07-13');
INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,JOIN_DATE) VALUES (2, 'Allen', 25, 'Texas', '2007-12-13');
INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (3, 'Teddy', 23, 'Norway', 20000.00, DEFAULT );
INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00, '2007-12-13' ), (5, 'David', 27, 'Texas', 85000.00, '2007-12-13');


SELECT (15 + 6) AS ADDITION ;                        
SELECT COUNT(*) AS "RECORDS" FROM COMPANY;           
SELECT CURRENT_TIMESTAMP;                           
select * from COMPANY;                               
SELECT * FROM COMPANY WHERE AGE >= 25 AND SALARY >= 65000;    
SELECT * FROM COMPANY WHERE AGE >= 25 OR SALARY >= 65000;     /* Prints all rows with age >= 25 or salary >= 65000 */
SELECT * FROM COMPANY WHERE AGE IS NOT NULL;                  /* Prints all rows where age is not null */
SELECT * FROM COMPANY WHERE NAME LIKE 'Pa%';                  /* Prints all rows in which name starts with Pa */
SELECT * FROM COMPANY WHERE NAME LIKE 'Pau_';                 /* Prints all rows in which name starts with Pau, has length 4 with last character anything */
SELECT * FROM COMPANY WHERE SALARY::text LIKE '200%';         /* Prints all rows in which slary starts with 200 and convert salary column type to text */
SELECT * FROM COMPANY WHERE ADDRESS  LIKE '%-%';              /* Prints all rows in which address  will have a hyphen (-) inside the text */
SELECT * FROM COMPANY WHERE AGE IN ( 25, 27 );                /* Prints all rows where age is between 25 and 27 */
SELECT * FROM COMPANY WHERE AGE NOT IN ( 25, 27 );            /* Prints all rows where age is not between 25 and 27 */
SELECT * FROM COMPANY WHERE AGE BETWEEN 25 AND 27;            /* Prints all rows where age is between 25 and 27 */
SELECT AGE FROM COMPANY
        WHERE EXISTS (SELECT AGE FROM COMPANY WHERE SALARY > 65000);  /* Prints only age column where salary is > 65000 */
SELECT * FROM COMPANY
        WHERE AGE > (SELECT AGE FROM COMPANY WHERE SALARY > 65000);   /* The following SELECT statement makes use of SQL subquery where subquery finds all the records with AGE field having SALARY > 65000 and later WHERE clause is being used along with > operator to list down all the records where AGE from outside query is greater than the age in the result returned by sub-query */
SELECT * FROM COMPANY LIMIT 4;                                /* fetches only first 4 rows from table */
SELECT * FROM COMPANY LIMIT 3 OFFSET 2;                       /* fetches 5 rows, skips first 2 rows and show the rest */
SELECT * FROM COMPANY ORDER BY NAME DESC;                     /* Prints all rows with name in descending order */



/*** UPDATE QUERY ***/
UPDATE COMPANY SET SALARY = 15000 WHERE ID = 3;               /* Set salary as 15000 in row with id 3 */
UPDATE COMPANY SET ADDRESS = 'Texas', SALARY=20000;           /* Set address as Texas and salary as 20000 to all rows in table */


/*** DELETE QUERY ***/
DELETE FROM COMPANY WHERE ID = 2;                            /* Deletes row with id as 2 */





